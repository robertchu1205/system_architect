variables:
  GATEWAY_IMAGE: harbor-k8s.wzs.wistron.com.cn/datteam/dip-gateway:latest
  PROCESS_IMAGE: harbor-k8s.wzs.wistron.com.cn/datteam/oneai-process:1.1.0
  AI_SERVER_USER: wzsdat
  IP: 172.30.52.10
  LIMIT_CPU: 1
  LIMIT_MEMORY: 1Gi
  GW_NODE_PORT: "3333"
  PROJECT_CODE: aoi-wzs-p3-ipbu-saiap
  CONTAINER_PREFIX: dip
  GIT_SSL_NO_VERIFY: "true"
  KUBECONFIG_DIR: /home/${AI_SERVER_USER}/.kube/config
  TEMPLATE_PATH: /home/${AI_SERVER_USER}/dip-kustomize
  FUNCTIONS_PATH: /home/${AI_SERVER_USER}/dip-kustomize/process/functions
  AIPREDICT_PATH: /home/${AI_SERVER_USER}/AIpredict
  CHECKPOINT_CONFIG_PATH: /home/${AI_SERVER_USER}/checkpoint-config

#cache:
#  key: "PIPELINE-${CI_COMMIT_TAG}"
#  untracked: true
#  paths:
#    - Model/
#    - ROI/

stages:
  # - pre-config
  - status
  - sync-checkpoint-config
  - sync-template
  - gen-process
  - gen-gateway
  - deploy-dashboards

# pre-config:
#   variables:
#     GIT_STRATEGY: none
#   image: harbor-k8s.wzs.wistron.com.cn/datteam/alice2.0:latest
#   #endeveit/docker-jq:latest
#   stage: pre-config
#   #artifacts:
#   #  paths:
#   #  - invoke.sh
#   #  - server.json
#   #  - jq
#   #  expire_in: 1 day
#   before_script:
#     #- echo "$PRIVATE_KEY"
#     - mkdir -p ~/.ssh && chmod 700 ~/.ssh
#     - echo "$PRIVATE_KEY" > ~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa
#     - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
#     - chmod 600 ~/.ssh/config
#   script:
#     - git init
#     - git remote add origin $GIT_CLONE_SSH_URL
#     - git config pack.windowMemory "100m"
#     - git config pack.packSizeLimit "100m"
#     - git config pack.threads "1"
#     - git config pack.window "0"
#     #- git config --global pack.deltaCacheSize "512m"
#     - git config core.sparseCheckout true
#     - echo "invoke.sh" >> .git/info/sparse-checkout
#     - echo "server.json" >> .git/info/sparse-checkout
#     - echo "jq" >> .git/info/sparse-checkout
#     - git pull origin master
#     - cat invoke.sh
#     - cat server.json
#     - chmod +x jq
#     - cp jq /usr/bin
#     - sh invoke.sh ${CI_COMMIT_TAG} ${TOKEN} ${CI_PROJECT_ID}
#   after_script:
#     - git remote rm origin
#   tags:
#     - OA
#   only:
#     refs:
#       - /^Model-v[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9].[0-9][0-9][0-9][0-9]$/
#   except:
#     variables:
#       - $IP

status:
  variables:
    GIT_STRATEGY: none
  image: harbor-k8s.wzs.wistron.com.cn/datteam/oneai/rsync-server:latest
  tags:
    - robert-gitlab-runner
  stage: status
  before_script:
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    - echo "$PRIVATE_KEY" > ~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - chmod 600 ~/.ssh/config
  script:
    - export WHICH_ENVSUBST=`ssh -tt ${AI_SERVER_USER}@${IP} which envsubst`
    - echo ${IP}, ${WHICH_ENVSUBST}
    - if [[ $WHICH_ENVSUBST =~ ^$ ]]; then exit 1; fi
    - ssh -tt ${AI_SERVER_USER}@${IP} kubectl --kubeconfig ${KUBECONFIG_DIR} version
    - ssh -tt ${AI_SERVER_USER}@${IP} kubectl --kubeconfig ${KUBECONFIG_DIR} get pod -l app=gateway
    - ssh -tt ${AI_SERVER_USER}@${IP} mkdir -p ${TEMPLATE_PATH} ${AIPREDICT_PATH} ${CHECKPOINT_CONFIG_PATH}
  only:
    # refs:
    #   - master
    # variables:
    #   - $CI_COMMIT_MESSAGE =~ /Model-v[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9].[0-9][0-9][0-9][0-9]/
    refs:
      - /^Model-v[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9].[0-9][0-9][0-9][0-9]$/
  
sync-checkpoint-config:
  variables:
    GIT_STRATEGY: none
  image: harbor-k8s.wzs.wistron.com.cn/datteam/alice2.0:latest
  tags:
    - robert-gitlab-runner
  stage: sync-checkpoint-config
  dependencies:
    - status
  before_script:
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    - echo "$PRIVATE_KEY" > ~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - chmod 600 ~/.ssh/config
    - git config --global pack.windowMemory "100m"
    - git config --global pack.packSizeLimit "100m"
    - git config --global pack.threads "1"
    - git config --global pack.window "0"
    #- git config --global pack.deltaCacheSize "512m"
    - git init
    - git remote add origin ${GIT_CLONE_SSH_URL}
    # - git config core.sparseCheckout true
    # - echo "Model" >> .git/info/sparse-checkout
    # - echo "server.json" >> .git/info/sparse-checkout
    # - echo "processModel.sh" >> .git/info/sparse-checkout
    - git pull origin master
  script:
    - ls -l -a .
    - rsync -rvzh --progress --delete . ${AI_SERVER_USER}@${IP}:${CHECKPOINT_CONFIG_PATH}
    - ssh -tt ${AI_SERVER_USER}@${IP} ls -a ${CHECKPOINT_CONFIG_PATH}
  after_script:
    - git remote rm origin
  only:
    refs:
      - /^Model-v[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9].[0-9][0-9][0-9][0-9]$/

if-gw-node-port:
  extends: .sync-template
  only:
    variables: [ $GW_NODE_PORT != "3333" ]
  variables:
    GATEWAY_YAML: gateway_nodeport.yaml

if-gw-load-balancer:
  extends: .sync-template
  only:
    variables: [ $GW_NODE_PORT == "3333" ]
  variables:
    GATEWAY_YAML: gateway.yaml

.sync-template:
  variables:
    GIT_STRATEGY: none
  image: harbor-k8s.wzs.wistron.com.cn/datteam/alice2.0:latest
  tags:
    - robert-gitlab-runner
  stage: sync-template
  dependencies:
    - sync-checkpoint-config
  before_script:
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    - echo "$PRIVATE_KEY" > ~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - chmod 600 ~/.ssh/config
    - git config --global pack.windowMemory "100m"
    - git config --global pack.packSizeLimit "100m"
    - git config --global pack.threads "1"
    - git config --global pack.window "0"
    #- git config --global pack.deltaCacheSize "512m"
    - git init
    - git remote add origin ${KUSTOMIZE_GIT_CLONE_SSH_URL}
    # - git config core.sparseCheckout true
    # - echo "Model" >> .git/info/sparse-checkout
    # - echo "server.json" >> .git/info/sparse-checkout
    # - echo "processModel.sh" >> .git/info/sparse-checkout
    - git pull origin master
  script:
    - ls -l -a .
    # - chmod +x ./monitoring/kustomize
    - rsync -rvzh --progress . ${AI_SERVER_USER}@${IP}:${TEMPLATE_PATH}
    - ssh -tt ${AI_SERVER_USER}@${IP} ls -a ${TEMPLATE_PATH}
    # - ssh -tt ${AI_SERVER_USER}@${IP} cp ${TEMPLATE_PATH}/monitoring/kustomize /usr/bin
    - echo ${GATEWAY_YAML}
    - ssh -tt ${AI_SERVER_USER}@${IP} "export containerprefix=${CONTAINER_PREFIX} && export gwnodeport=${GW_NODE_PORT} && export projectcode=${PROJECT_CODE} && export limitscpu=${LIMIT_CPU} && export limitsmemory=${LIMIT_MEMORY} && export checkpointconfig=${CHECKPOINT_CONFIG_PATH} && export aipredict=${AIPREDICT_PATH} && export gatewayimage=${GATEWAY_IMAGE} && export aiserverip=${IP} && envsubst < ${TEMPLATE_PATH}/gateway/${GATEWAY_YAML} > ${TEMPLATE_PATH}/gateway/${CI_COMMIT_SHORT_SHA}.yaml"
    - ssh -tt ${AI_SERVER_USER}@${IP} "ls -a ${TEMPLATE_PATH} && cat ${TEMPLATE_PATH}/gateway/${CI_COMMIT_SHORT_SHA}.yaml"
  after_script:
    - git remote rm origin
  only:
    refs:
      - /^Model-v[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9].[0-9][0-9][0-9][0-9]$/

gen-process:
  variables:
    GIT_STRATEGY: none
  image: harbor-k8s.wzs.wistron.com.cn/datteam/alice2.0:latest
  tags:
    - robert-gitlab-runner
  stage: gen-process
  dependencies:
    - if-gw-load-balancer
    - if-gw-node-port
  before_script:
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    - echo "$PRIVATE_KEY" > ~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - chmod 600 ~/.ssh/config
    - git config --global pack.windowMemory "100m"
    - git config --global pack.packSizeLimit "100m"
    - git config --global pack.threads "1"
    - git config --global pack.window "0"
    #- git config --global pack.deltaCacheSize "512m"
    - git init
    - git remote add origin ${KUSTOMIZE_GIT_CLONE_SSH_URL}
    # - git config core.sparseCheckout true
    # - echo "Model" >> .git/info/sparse-checkout
    # - echo "server.json" >> .git/info/sparse-checkout
    # - echo "processModel.sh" >> .git/info/sparse-checkout
    - git pull origin master
  script:
    - ssh -tt ${AI_SERVER_USER}@${IP} ls -a ${TEMPLATE_PATH}
    - ssh -tt ${AI_SERVER_USER}@${IP} ls -a ${FUNCTIONS_PATH}
    - ssh -tt ${AI_SERVER_USER}@${IP} "export containerprefix=${CONTAINER_PREFIX} && export projectcode=${PROJECT_CODE} && export limitscpu=${LIMIT_CPU} && export limitsmemory=${LIMIT_MEMORY} && export processfunctions=${FUNCTIONS_PATH} && export processimage=${PROCESS_IMAGE} && envsubst < ${TEMPLATE_PATH}/process/process.yaml | kubectl --kubeconfig ${KUBECONFIG_DIR} apply -f -"
    - ssh -tt ${AI_SERVER_USER}@${IP} sleep 120
    - ssh -tt ${AI_SERVER_USER}@${IP} kubectl --kubeconfig ${KUBECONFIG_DIR} get deploy ${CONTAINER_PREFIX}-process-api -o wide
    - ssh -tt ${AI_SERVER_USER}@${IP} kubectl --kubeconfig ${KUBECONFIG_DIR} describe deploy ${CONTAINER_PREFIX}-process-api
    - ssh -tt ${AI_SERVER_USER}@${IP} kubectl --kubeconfig ${KUBECONFIG_DIR} describe pod -l app=${CONTAINER_PREFIX}-process-api
    - ssh -tt ${AI_SERVER_USER}@${IP} kubectl --kubeconfig ${KUBECONFIG_DIR} get svc ${CONTAINER_PREFIX}-process-api -o wide
    - export PROCESS_STATUS=`ssh -tt ${AI_SERVER_USER}@${IP} kubectl --kubeconfig ${KUBECONFIG_DIR} get deploy ${CONTAINER_PREFIX}-process-api`
    - if [[ $PROCESS_STATUS =~ ^.*0/1.*$ ]]; then exit 1; fi
  after_script:
    - git remote rm origin
  only:
    refs:
      - /^Model-v[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9].[0-9][0-9][0-9][0-9]$/
    variables: [ $PROCESS_IMAGE != null && $FUNCTIONS_PATH != null ]
      
gen-gateway:
  variables:
    GIT_STRATEGY: none
  image: harbor-k8s.wzs.wistron.com.cn/datteam/alice2.0:latest
  tags:
    - robert-gitlab-runner
  stage: gen-gateway
  dependencies:
    - if-gw-node-port
    - if-gw-load-balancer
  before_script:
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    - echo "$PRIVATE_KEY" > ~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - chmod 600 ~/.ssh/config
  script:
    # - echo "version.py" >> .git/info/sparse-checkout
    # - ssh -tt ${AI_SERVER_USER}@${IP} [ ! -f "${UTILS_PATH}version.py" ] && rsync -rvzh --progress version.py ${IP}:${UTILS_PATH}
    # - ssh -tt ${AI_SERVER_USER}@${IP} "cd ${UTILS_PATH} && python version.py"
    - ssh -tt ${AI_SERVER_USER}@${IP} ls -a ${CHECKPOINT_CONFIG_PATH}
    - ssh -tt ${AI_SERVER_USER}@${IP} ls -a ${AIPREDICT_PATH}
    - ssh -tt ${AI_SERVER_USER}@${IP} cat ${TEMPLATE_PATH}/gateway/${CI_COMMIT_SHORT_SHA}.yaml
    - ssh -tt ${AI_SERVER_USER}@${IP} kubectl --kubeconfig ${KUBECONFIG_DIR} apply -f ${TEMPLATE_PATH}/gateway/${CI_COMMIT_SHORT_SHA}.yaml
    - ssh -tt ${AI_SERVER_USER}@${IP} sleep 150
    - ssh -tt ${AI_SERVER_USER}@${IP} kubectl --kubeconfig ${KUBECONFIG_DIR} get deploy ${CONTAINER_PREFIX}-gateway -o wide
    - ssh -tt ${AI_SERVER_USER}@${IP} kubectl --kubeconfig ${KUBECONFIG_DIR} describe deploy ${CONTAINER_PREFIX}-gateway
    - ssh -tt ${AI_SERVER_USER}@${IP} kubectl --kubeconfig ${KUBECONFIG_DIR} describe pod -l app=gateway
    - ssh -tt ${AI_SERVER_USER}@${IP} kubectl --kubeconfig ${KUBECONFIG_DIR} get svc ${CONTAINER_PREFIX}-gateway -o wide
    - export GATEWAY_STATUS=`ssh -tt ${AI_SERVER_USER}@${IP} kubectl --kubeconfig ${KUBECONFIG_DIR} get deploy ${CONTAINER_PREFIX}-gateway`
    - if [[ $GATEWAY_STATUS =~ ^.*0/1.*$ ]]; then exit 1; fi
    - curl -kL http://${IP}:${GW_NODE_PORT}/showconfig
    # - ssh -tt ${AI_SERVER_USER}@${IP} kubectl --kubeconfig ${KUBECONFIG_DIR} rollout restart deploy ${CONTAINER_PREFIX}-gateway
  only:
    refs:
      - /^Model-v[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9].[0-9][0-9][0-9][0-9]$/

deploy-dashboards:
  variables:
    GIT_STRATEGY: none
    NOT_FOUND_MSG: "No resources found"
    NOT_FOUND_SC: "Error from server (NotFound)"
  image: harbor-k8s.wzs.wistron.com.cn/datteam/alice2.0:latest
  tags:
    - robert-gitlab-runner
  stage: deploy-dashboards
  dependencies:
    - gen-gateway
  before_script:
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    - echo "$PRIVATE_KEY" > ~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - chmod 600 ~/.ssh/config
  script:
    - ssh -tt ${AI_SERVER_USER}@${IP} ls -a ${TEMPLATE_PATH}
    - export LOKI_STATUS=`ssh -tt ${AI_SERVER_USER}@${IP} kubectl --kubeconfig ${KUBECONFIG_DIR} get pod -l app=loki`
    - if [[ "$LOKI_STATUS" != *"$NOT_FOUND_MSG"* ]]; then echo $LOKI_STATUS && exit 0; fi
    - export PROMETHUS_STATUS=`ssh -tt ${AI_SERVER_USER}@${IP} kubectl --kubeconfig ${KUBECONFIG_DIR} get pod -l app=prometheus`
    - if [[ "$PROMETHUS_STATUS" != *"$NOT_FOUND_MSG"* ]]; then echo $PROMETHUS_STATUS && exit 0; fi
    - export PROMTAIL_STATUS=`ssh -tt ${AI_SERVER_USER}@${IP} kubectl --kubeconfig ${KUBECONFIG_DIR} get pod -l app=promtail`
    - if [[ "$PROMTAIL_STATUS" != *"$NOT_FOUND_MSG"* ]]; then echo $PROMTAIL_STATUS && exit 0; fi
    - export GRAFANA_STATUS=`ssh -tt ${AI_SERVER_USER}@${IP} kubectl --kubeconfig ${KUBECONFIG_DIR} get pod -l app=grafana`
    - if [[ "$GRAFANA_STATUS" != *"$NOT_FOUND_MSG"* ]]; then echo $GRAFANA_STATUS && exit 0; fi
    - export WHICH_KUSTOMIZE=`ssh -tt ${AI_SERVER_USER}@${IP} which kustomize`
    - if [[ $WHICH_KUSTOMIZE =~ ^$ ]]; then exit 1; fi
    - export SC_STATUS=`ssh -tt ${AI_SERVER_USER}@${IP} kubectl --kubeconfig ${KUBECONFIG_DIR} get sc local-path`
    - if [[ "$SC_STATUS" == *"$NOT_FOUND_SC"* ]]; then exit 1; fi
    - ssh -tt ${AI_SERVER_USER}@${IP} "export containerprefix=${CONTAINER_PREFIX} && export projectcode=${PROJECT_CODE} && export aiserverip=${IP} && envsubst < ${TEMPLATE_PATH}/monitoring/base/prometheus/template-prometheus.yml > ${TEMPLATE_PATH}/monitoring/base/prometheus/prometheus.yml && envsubst < ${TEMPLATE_PATH}/monitoring/kustomization.yaml > ${TEMPLATE_PATH}/monitoring/${CI_COMMIT_SHORT_SHA}.yaml && cat ${TEMPLATE_PATH}/monitoring/base/prometheus/prometheus.yml"
    - ssh -tt ${AI_SERVER_USER}@${IP} "ls -a ${TEMPLATE_PATH}/monitoring && mv ${TEMPLATE_PATH}/monitoring/${CI_COMMIT_SHORT_SHA}.yaml ${TEMPLATE_PATH}/monitoring/kustomization.yaml && cat ${TEMPLATE_PATH}/monitoring/kustomization.yaml"
    - ssh -tt ${AI_SERVER_USER}@${IP} "kustomize build ${TEMPLATE_PATH}/monitoring/ | kubectl --kubeconfig ${KUBECONFIG_DIR} create -f -"
  only:
    refs:
      - /^Model-v[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9].[0-9][0-9][0-9][0-9]$/